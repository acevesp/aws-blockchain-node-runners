"use strict";(self.webpackChunkaws_blockchain_node_runners=self.webpackChunkaws_blockchain_node_runners||[]).push([[948],{5171:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"Blueprints/XRP","title":"XRP","description":"","source":"@site/docs/Blueprints/XRP.md","sourceDirName":"Blueprints","slug":"/Blueprints/XRP","permalink":"/aws-blockchain-node-runners/docs/Blueprints/XRP","draft":false,"unlisted":false,"editUrl":"https://github.com/aws-samples/aws-blockchain-node-runners/website/docs/Blueprints/XRP.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"XRP"},"sidebar":"sidebar","previous":{"title":"WAX","permalink":"/aws-blockchain-node-runners/docs/Blueprints/Wax"}}');var t=s(4848),r=s(8453);function l(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sample-aws-blockchain-node-runner-app-for-xrp-nodes",children:"Sample AWS Blockchain Node Runner app for XRP Nodes"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Contributed by"})})}),(0,t.jsx)(n.tbody,{children:(0,t.jsx)(n.tr,{children:(0,t.jsxs)(n.td,{style:{textAlign:"center"},children:["Pedro Aceves ",(0,t.jsx)("br",{}),(0,t.jsx)(n.a,{href:"mailto:acevespa@amazon.com",children:"acevespa@amazon.com"})]})})})]}),"\n",(0,t.jsxs)(n.p,{children:["XRP node deployment on AWS. All nodes are configure as ",(0,t.jsx)(n.a,{href:"https://xrpl.org/docs/infrastructure/configuration/server-modes/run-rippled-as-a-stock-server",children:'"Stock Servers"'})]}),"\n",(0,t.jsx)(n.h2,{id:"overview-of-deployment-architectures-for-single-and-ha-setups",children:"Overview of Deployment Architectures for Single and HA setups"}),"\n",(0,t.jsx)(n.h3,{id:"single-node-setup",children:"Single node setup"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Single Node Deployment",src:s(6730).A+"",width:"911",height:"311"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["A XRP node deployed in the ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html",children:"Default VPC"})," continuously synchronizes with the rest of nodes on the configured xrp network through ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html",children:"Internet Gateway"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"The XRP node is used by dApps or development tools internally from within the Default VPC. RPC API is not exposed to the Internet directly to protect nodes from unauthorized access."}),"\n",(0,t.jsx)(n.li,{children:"The XRP node sends various monitoring metrics for both EC2 and current XRP ledger sequence to Amazon CloudWatch. It also updates the dashboard with correct storage device names to display respective metrics properly."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ha-setup",children:"HA setup"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Highly Available Nodes Deployment",src:s(9486).A+"",width:"1001",height:"571"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["A set of XRP nodes are deployed within an ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-groups.html",children:"Auto Scaling Group"})," in the ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html",children:"Default VPC"})," continuously synchronizing with the rest of nodes on the configured xrp network through ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html",children:"Internet Gateway"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The XRP nodes are accessed by dApps or development tools internally through ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html",children:"Application Load Balancer"}),". RPC API is not exposed to the Internet to protect nodes from unauthorized access."]}),"\n",(0,t.jsx)(n.li,{children:"The XRP nodes send various monitoring metrics for EC2 to Amazon CloudWatch."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setup-instructions",children:"Setup Instructions"}),"\n",(0,t.jsx)(n.h3,{id:"open-aws-cloudshell",children:"Open AWS CloudShell"}),"\n",(0,t.jsx)(n.p,{children:"To begin, ensure you login to your AWS account with permissions to create and modify resources in IAM, EC2, EBS, VPC, S3, KMS, and Secrets Manager."}),"\n",(0,t.jsxs)(n.p,{children:["From the AWS Management Console, open the ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/welcome.html",children:"AWS CloudShell"}),", a web-based shell environment. If unfamiliar, review the ",(0,t.jsx)(n.a,{href:"https://youtu.be/fz4rbjRaiQM",children:"2-minute YouTube video"})," for an overview and check out ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/creating-vpc-environment.html",children:"CloudShell with VPC environment"})," that we'll use to test nodes API from internal IP address space."]}),"\n",(0,t.jsx)(n.p,{children:"Once ready, you can run the commands to deploy and test blueprints in the CloudShell."}),"\n",(0,t.jsx)(n.h3,{id:"clone-this-repository-and-install-dependencies",children:"Clone this repository and install dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aws-samples/aws-blockchain-node-runners.git\ncd aws-blockchain-node-runners\nnpm install\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configure-your-setup",children:"Configure your setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Make sure you are in the root directory of the cloned repository"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If you have deleted or don't have the default VPC, create default VPC"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"aws ec2 create-default-vpc\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"})," ",(0,t.jsxs)(n.em,{children:["You may see the following error if the default VPC already exists: ",(0,t.jsx)(n.code,{children:"An error occurred (DefaultVpcAlreadyExists) when calling the CreateDefaultVpc operation: A Default VPC already exists for this account in this region."}),". That means you can just continue with the following steps."]})]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Configure  your setup"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Create your own copy of ",(0,t.jsx)(n.code,{children:".env"})," file and edit it to update with your AWS Account ID and Region:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd lib/xrp\ncp ./sample-configs/.env-sample-testnet .env\nnano .env\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"})," *You can find more examples inside ",(0,t.jsx)(n.code,{children:"sample-configs"})," *"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Deploy common components such as IAM role:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx cdk deploy XRP-common\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-a-single-node",children:"Deploy a Single Node"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Deploy the node"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx cdk deploy XRP-single-node --json --outputs-file single-node-deploy.json\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["After starting the node you need to wait for the initial synchronization process to finish. You can use Amazon CloudWatch to track the progress. There is a script that publishes CloudWatch metrics every 5 minutes, where you can watch ",(0,t.jsx)(n.code,{children:"XRP Sequence"})," metrics. When the node is fully synced the sequence should match that of the configured xrp network (testnet, mainnet, etc). To see them:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.a,{href:"https://console.aws.amazon.com/cloudwatch/",children:"CloudWatch service"})," (make sure you are in the region you have specified for ",(0,t.jsx)(n.code,{children:"AWS_REGION"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Open ",(0,t.jsx)(n.code,{children:"Dashboards"})," and select dashboard that starts with ",(0,t.jsx)(n.code,{children:"XRP-single-node"})," from the list of dashboards."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Once the initial synchronization is done, you should be able to access the RPC API of that node from within the same VPC. The RPC port is not exposed to the Internet. Run the following query against the private IP of the single RPC node you deployed:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export INSTANCE_ID=$(cat single-node-deploy.json | jq -r '.[\"XRP-single-node\"].nodeinstanceid')\n NODE_INTERNAL_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)\necho \"NODE_INTERNAL_IP=$NODE_INTERNAL_IP\"\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Copy output from the last ",(0,t.jsx)(n.code,{children:"echo"})," command with ",(0,t.jsx)(n.code,{children:"NODE_INTERNAL_IP=<internal_IP>"})," and open ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/creating-vpc-environment.html",children:"CloudShell tab with VPC environment"})," to access internal IP address space. Paste ",(0,t.jsx)(n.code,{children:"NODE_INTERNAL_IP=<internal_IP>"})," into the new CloudShell tab."]}),"\n",(0,t.jsx)(n.p,{children:"Then query the RPC API to receive the latest block height:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# IMPORTANT: Run from CloudShell VPC environment tab\ncurl -X POST -H "Content-Type: application/json" http://$NODE_INTERNAL_IP:6005/ -d \'{\n "method": "ledger_current",\n "params": [{}]\n}\'\n'})}),"\n",(0,t.jsx)(n.p,{children:"You will get a response similar to this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"result":{"ledger_current_index":5147254,"status":"success"}}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note: If the node is still syncing, you will receive the following response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"result":{"error":"noNetwork","error_code":17,"error_message":"Not synced to the network.","request":{"command":"ledger_current"},"status":"error"}}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-ha-nodes",children:"Deploy HA Nodes"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Deploy multiple HA Nodes"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pwd\n# Make sure you are in aws-blockchain-node-runners/lib/xrp\nnpx cdk deploy XRP-ha-nodes --json --outputs-file ha-nodes-deploy.json\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Give the new nodes time to initialize"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To perform an RPC request to your load balancer, run the following command to retrieve the ALB URL:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export XRP_RPC_ALB_URL=$(cat ha-nodes-deploy.json | jq -r '..|.alburl? | select(. != null)')\necho XRP_RPC_ALB_URL=$XRP_RPC_ALB_URL\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Copy output from the last ",(0,t.jsx)(n.code,{children:"echo"})," command with ",(0,t.jsx)(n.code,{children:"XRP_RPC_ALB_URL=<alb_url>"})," and open ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/creating-vpc-environment.html",children:"CloudShell tab with VPC environment"})," to access internal IP address space. Paste ",(0,t.jsx)(n.code,{children:"XRP_RPC_ALB_URL=<alb_url>"})," into the VPC CloudShell tab."]}),"\n",(0,t.jsx)(n.p,{children:"Then query the load balancer to retrieve the current block height:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -X POST -H "Content-Type: application/json" http://$XRP_RPC_ALB_URL:6005/ -d \'{\n  "method": "ledger_current",\n  "params": [{}]\n'})}),"\n",(0,t.jsx)(n.p,{children:"You will get a response similar to this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"result":{"ledger_current_index":5147300,"status":"success"}}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"})," ",(0,t.jsx)(n.em,{children:"By default and for security reasons the load balancer is available only from within the default VPC in the region where it is deployed. It is not available from the Internet and is not open for external connections. Before opening it up please make sure you protect your RPC APIs."})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cleaning-up-and-undeploying-everything",children:"Cleaning up and undeploying everything"}),"\n",(0,t.jsx)(n.p,{children:"Destroy HA Nodes, Single Nodes and Common stacks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Setting the AWS account id and region in case local .env file is lost\n export AWS_ACCOUNT_ID=<your_target_AWS_account_id>\n export AWS_REGION=<your_target_AWS_region>\n\npwd\n# Make sure you are in aws-blockchain-node-runners/lib/xrp\n\n# Destroy HA Nodes\ncdk destroy XRP-ha-nodes\n\n# Destroy Single Node\ncdk destroy XRP-single-node\n\n# Delete all common components like IAM role and Security Group\ncdk destroy XRP-common\n"})}),"\n",(0,t.jsx)(n.h3,{id:"faq",children:"FAQ"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"How to check the logs from the EC2 user-data script?"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pwd\n# Make sure you are in aws-blockchain-node-runners/lib/xrp\n\nexport INSTANCE_ID=$(cat single-node-deploy.json | jq -r \'.["XRP-single-node"].nodeinstanceid\')\necho "INSTANCE_ID=" $INSTANCE_ID\naws ssm start-session --target $INSTANCE_ID --region $AWS_REGION\nsudo cat /var/log/cloud-init-output.log\nsudo cat /var/log/user-data.log\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["How can I change rippled (XRP) configuration?",(0,t.jsx)(n.br,{}),"\n","There are two places of configuration for the xrp nodes:"]}),"\n",(0,t.jsxs)(n.p,{children:["a. ",(0,t.jsx)(n.code,{children:".env"})," file. Here is where you specify the xrp network you want. This is the key for the config in part b"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'HUB_NETWORK_ID="testnet"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["b. ",(0,t.jsx)(n.code,{children:"lib/xrp/lib/assets/rippled/rippledconfig.py"}),' file. Here you can setup listeners and network configuration for the network specified in part "a"']}),"\n"]}),"\n"]})]})}function i(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}const a={sidebar_label:"XRP"},d="",c={},h=[{value:"Overview of Deployment Architectures for Single and HA setups",id:"overview-of-deployment-architectures-for-single-and-ha-setups",level:2},{value:"Single node setup",id:"single-node-setup",level:3},{value:"HA setup",id:"ha-setup",level:3},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"Open AWS CloudShell",id:"open-aws-cloudshell",level:3},{value:"Clone this repository and install dependencies",id:"clone-this-repository-and-install-dependencies",level:3},{value:"Configure your setup",id:"configure-your-setup",level:3},{value:"Deploy a Single Node",id:"deploy-a-single-node",level:3},{value:"Deploy HA Nodes",id:"deploy-ha-nodes",level:3},{value:"Cleaning up and undeploying everything",id:"cleaning-up-and-undeploying-everything",level:3},{value:"FAQ",id:"faq",level:3}];function u(e){const n={h1:"h1",header:"header",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:""})}),"\n","\n",(0,t.jsx)(i,{})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},9486:(e,n,s)=>{s.d(n,{A:()=>o});const o=s.p+"assets/images/Architecture-HA Nodes.drawio-f487da08d83ff14402db6fde82139dc5.png"},6730:(e,n,s)=>{s.d(n,{A:()=>o});const o=s.p+"assets/images/Architecture-Single node.drawio-af3ee88ee23dba1fef65dabd59d4bca7.png"},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var o=s(6540);const t={},r=o.createContext(t);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);